import asyncio
import logging
from telegram import Update, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

from config import TELEGRAM_TOKEN, ADMIN_USER_ID
from database import init_db, get_products, get_product, add_to_cart, get_user_cart, clear_cart, create_order, add_order_items, save_user_info, get_user_info, get_user_orders, add_product, get_all_users, get_statistics
from keyboards import main_menu, category_menu, product_keyboard, cart_keyboard, checkout_keyboard, admin_orders_keyboard, cancel_keyboard
from payment import create_payment_stub

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await save_user_info(
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    is_admin = user.id == ADMIN_USER_ID
    
    welcome_text = f"üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ JoJo Shop, {user.first_name}!\n"
    welcome_text += "–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥–µ—à—å –ª—É—á—à–∏–µ —Ç–æ–≤–∞—Ä—ã –ø–æ –∞–Ω–∏–º–µ JoJo's Bizarre Adventure!"
    
    if is_admin:
        welcome_text = "üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å JoJo Shop!"
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=main_menu(is_admin)
    )

async def show_catalog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=category_menu())

async def show_products(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
    products = await get_products()
    
    if not products:
        await query.message.reply_text("üòî –ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    user_cart = await get_user_cart(query.from_user.id)
    cart_dict = {item['product_id']: item['quantity'] for item in user_cart}
    
    for product in products:
        text = f"‚ú® <b>{product['name']}</b>\n"
        text += f"üí∞ –¶–µ–Ω–∞: {product['price']} —Ä—É–±.\n"
        text += f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product['category']}\n"
        text += f"üìù {product['description']}"
        
        quantity_in_cart = cart_dict.get(product['id'], 0)
        keyboard = product_keyboard(product['id'], quantity_in_cart)
        
        if product['image_path']:
            try:
                await query.message.reply_photo(
                    photo=open(product['image_path'], 'rb'),
                    caption=text,
                    parse_mode='HTML',
                    reply_markup=keyboard
                )
            except:
                await query.message.reply_text(text, parse_mode='HTML', reply_markup=keyboard)
        else:
            await query.message.reply_text(text, parse_mode='HTML', reply_markup=keyboard)

async def show_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    cart_items = await get_user_cart(user_id)
    
    if not cart_items:
        await update.message.reply_text("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        return
    
    total = 0
    text = "üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"
    
    for item in cart_items:
        item_total = item['price'] * item['quantity']
        text += f"üì¶ {item['name']} x{item['quantity']} = {item_total} —Ä—É–±.\n"
        total += item_total
    
    text += f"\n<b>–ò–¢–û–ì–û: {total} —Ä—É–±.</b>"
    
    await update.message.reply_text(text, parse_mode='HTML', reply_markup=cart_keyboard())

async def show_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    orders = await get_user_orders(user_id)
    
    if not orders:
        await update.message.reply_text("üì¶ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤")
        return
    
    text = "üì¶ <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:</b>\n\n"
    for order in orders:
        text += f"üÜî –ó–∞–∫–∞–∑ #{order['id']}\n"
        text += f"üí∞ –°—É–º–º–∞: {order['total_amount']} —Ä—É–±.\n"
        text += f"üìÖ –î–∞—Ç–∞: {order['created_at']}\n"
        text += f"üìä –°—Ç–∞—Ç—É—Å: {order['status']}\n\n"
    
    await update.message.reply_text(text, parse_mode='HTML')

async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_info = await get_user_info(user.id)
    
    text = f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n"
    text += f"üÜî ID: {user.id}\n"
    text += f"üë§ –ò–º—è: {user.first_name}\n"
    if user.last_name:
        text += f"üë• –§–∞–º–∏–ª–∏—è: {user.last_name}\n"
    if user.username:
        text += f"üè∑ Username: @{user.username}\n"
    
    if user_info:
        if user_info['phone']:
            text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user_info['phone']}\n"
        if user_info['address']:
            text += f"üè† –ê–¥—Ä–µ—Å: {user_info['address']}\n"
    
    await update.message.reply_text(text, parse_mode='HTML')

async def support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = "üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ JoJo Shop:</b>\n\n"
    text += "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–∫–∞–∑–æ–º:\n"
    text += "‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\n"
    text += "‚Ä¢ –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ\n"
    text += "‚Ä¢ –ü—Ä–∏–ª–æ–∂–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ\n\n"
    text += "‚è∞ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤"
    
    await update.message.reply_text(text, parse_mode='HTML')

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith('add_to_cart_'):
        product_id = int(query.data.split('_')[-1])
        await add_to_cart(query.from_user.id, product_id)
        await query.message.reply_text("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
        
    elif query.data == 'back_to_main':
        is_admin = query.from_user.id == ADMIN_USER_ID
        await query.message.reply_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu(is_admin))
        
    elif query.data == 'back_to_catalog':
        await show_products(update, context)
        
    elif query.data == 'checkout':
        await query.message.reply_text("üì¶ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞", reply_markup=checkout_keyboard())
        
    elif query.data == 'pay_order':
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–ø–ª–∞—Ç—ã
        cart_items = await get_user_cart(query.from_user.id)
        if not cart_items:
            await query.message.reply_text("üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
            return
            
        total = sum(item['price'] * item['quantity'] for item in cart_items)
        payment_url, payment_id = create_payment_stub(total, "–ó–∞–∫–∞–∑ –≤ JoJo Shop", query.from_user.id)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î
        order_id = await create_order(query.from_user.id, total, payment_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–∫–∞–∑–∞
        order_items = [
            {
                'product_id': item['product_id'],
                'quantity': item['quantity'],
                'price': item['price']
            }
            for item in cart_items
        ]
        await add_order_items(order_id, order_items)
        
        # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        await clear_cart(query.from_user.id)
        
        text = f"üí≥ <b>–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #{order_id}</b>\n\n"
        text += f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {total} —Ä—É–±.\n\n"
        text += "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ:"
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=payment_url)],
            [InlineKeyboardButton("üè† ¬´ –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
        
        await query.message.reply_text(text, parse_mode='HTML', reply_markup=keyboard)
        
    elif query.data.startswith('cat_'):
        category = query.data.split('_')[1]
        await query.message.reply_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
        
    elif query.data == 'clear_cart':
        await clear_cart(query.from_user.id)
        await query.message.reply_text("üóë –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")
        
    elif query.data == 'back_to_cart':
        await show_cart(query, context)
        
    elif query.data == 'back_to_admin':
        await query.message.reply_text("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=main_menu(True))

# –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_USER_ID:
        await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
        
    await update.message.reply_text("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å JoJo Shop", reply_markup=main_menu(True))

async def add_product_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_USER_ID:
        return
        
    user_states[update.effective_user.id] = 'adding_product'
    await update.message.reply_text(
        "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–ù–∞–∑–≤–∞–Ω–∏–µ|–û–ø–∏—Å–∞–Ω–∏–µ|–¶–µ–Ω–∞|–ö–∞—Ç–µ–≥–æ—Ä–∏—è|–ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "–§–∏–≥—É—Ä–∫–∞ Dio|–≠–ø–∏—á–Ω–∞—è —Ñ–∏–≥—É—Ä–∫–∞|1999|–§–∏–≥—É—Ä–∫–∏|data/images/dio.jpg",
        reply_markup=cancel_keyboard()
    )

async def handle_product_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if user_id != ADMIN_USER_ID:
        return
        
    if user_id in user_states and user_states[user_id] == 'adding_product':
        if update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            user_states.pop(user_id, None)
            await update.message.reply_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_menu(True))
            return
            
        try:
            parts = update.message.text.split('|')
            if len(parts) < 4:
                raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
                
            name = parts[0].strip()
            description = parts[1].strip()
            price = int(parts[2].strip())
            category = parts[3].strip()
            image_path = parts[4].strip() if len(parts) > 4 else None
            
            product_id = await add_product(name, description, price, category, image_path)
            
            user_states.pop(user_id, None)
            await update.message.reply_text(
                f"‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\nID: {product_id}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {name}",
                reply_markup=main_menu(True)
            )
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'")

async def show_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_USER_ID:
        return
        
    stats = await get_statistics()
    
    text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞:</b>\n\n"
    text += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users_count']}\n"
    text += f"üì¶ –ó–∞–∫–∞–∑–æ–≤: {stats['orders_count']}\n"
    text += f"üí∞ –î–æ—Ö–æ–¥: {stats['total_revenue']} —Ä—É–±.\n"
    
    await update.message.reply_text(text, parse_mode='HTML')

async def show_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_USER_ID:
        return
        
    users = await get_all_users()
    
    if not users:
        await update.message.reply_text("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç")
        return
    
    text = f"üë• <b>–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(users)}):</b>\n\n"
    for user in users[-10:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
        text += f"üÜî {user['user_id']} - {user['first_name']}"
        if user['username']:
            text += f" (@{user['username']})"
        text += "\n"
    
    await update.message.reply_text(text, parse_mode='HTML')

async def broadcast_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_USER_ID:
        return
        
    user_states[update.effective_user.id] = 'broadcast'
    await update.message.reply_text(
        "üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=cancel_keyboard()
    )

async def handle_broadcast_input(update: Update, context: Application):
    user_id = update.effective_user.id
    
    if user_id != ADMIN_USER_ID:
        return
        
    if user_id in user_states and user_states[user_id] == 'broadcast':
        if update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            user_states.pop(user_id, None)
            await update.message.reply_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=main_menu(True))
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = await get_all_users()
        success_count = 0
        fail_count = 0
        
        message_text = update.message.text
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        for user in users:
            try:
                await context.bot.send_message(
                    chat_id=user['user_id'],
                    text=f"üì¢ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç JoJo Shop:</b>\n\n{message_text}",
                    parse_mode='HTML'
                )
                success_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {e}")
                fail_count += 1
        
        user_states.pop(user_id, None)
        await update.message.reply_text(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"–£—Å–ø–µ—à–Ω–æ: {success_count}\n"
            f"–û—à–∏–±–æ–∫: {fail_count}",
            reply_markup=main_menu(True)
        )

async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in user_states:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        if user_states[user_id] == 'adding_product':
            await handle_product_input(update, context)
        elif user_states[user_id] == 'broadcast':
            await handle_broadcast_input(update, context.application)
        return
    
    await update.message.reply_text("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    asyncio.run(init_db())
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.Regex("üõç –ö–∞—Ç–∞–ª–æ–≥"), show_catalog))
    application.add_handler(MessageHandler(filters.Regex("üõí –ö–æ—Ä–∑–∏–Ω–∞"), show_cart))
    application.add_handler(MessageHandler(filters.Regex("üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã"), show_orders))
    application.add_handler(MessageHandler(filters.Regex("üë§ –ü—Ä–æ—Ñ–∏–ª—å"), show_profile))
    application.add_handler(MessageHandler(filters.Regex("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞"), support))
    application.add_handler(MessageHandler(filters.Regex("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), start))
    
    # –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    application.add_handler(MessageHandler(filters.Regex("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"), add_product_start))
    application.add_handler(MessageHandler(filters.Regex("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), show_statistics))
    application.add_handler(MessageHandler(filters.Regex("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"), show_users))
    application.add_handler(MessageHandler(filters.Regex("üì¢ –†–∞—Å—Å—ã–ª–∫–∞"), broadcast_start))
    application.add_handler(MessageHandler(filters.Regex("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"), admin_panel))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, unknown_command))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("ü§ñ JoJo Shop Bot –∑–∞–ø—É—â–µ–Ω!")
    print("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    application.run_polling()

if __name__ == '__main__':
    main()
